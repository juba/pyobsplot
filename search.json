[
  {
    "objectID": "usage.html",
    "href": "usage.html",
    "title": "Usage",
    "section": "",
    "text": "Javascript modules"
  },
  {
    "objectID": "usage.html#from-javascript-to-python",
    "href": "usage.html#from-javascript-to-python",
    "title": "Usage",
    "section": "",
    "text": "Javascript modules"
  },
  {
    "objectID": "usage.html#alternative-syntaxes",
    "href": "usage.html#alternative-syntaxes",
    "title": "Usage",
    "section": "Alternative syntaxes",
    "text": "Alternative syntaxes"
  },
  {
    "objectID": "usage.html#dataframes-and-series",
    "href": "usage.html#dataframes-and-series",
    "title": "Usage",
    "section": "DataFrames and Series",
    "text": "DataFrames and Series"
  },
  {
    "objectID": "usage.html#datetime-objects",
    "href": "usage.html#datetime-objects",
    "title": "Usage",
    "section": "datetime objects",
    "text": "datetime objects"
  },
  {
    "objectID": "usage.html#quarto",
    "href": "usage.html#quarto",
    "title": "Usage",
    "section": "Quarto",
    "text": "Quarto\nFor plots to be computed and displayed when compiling from an ipynb file, you have to add --execute :\nquarto render test.ipynb --execute --to html"
  },
  {
    "objectID": "getting_started.html",
    "href": "getting_started.html",
    "title": "Getting started",
    "section": "",
    "text": "pyobsplot can be installed with pip:\npip install pyobsplot"
  },
  {
    "objectID": "getting_started.html#installation",
    "href": "getting_started.html#installation",
    "title": "Getting started",
    "section": "",
    "text": "pyobsplot can be installed with pip:\npip install pyobsplot"
  },
  {
    "objectID": "getting_started.html#usage",
    "href": "getting_started.html#usage",
    "title": "Getting started",
    "section": "Usage",
    "text": "Usage\nTo use pyobsplot, you must import at least its Obsplot and Plot classes with:\n\nfrom pyobsplot import Obsplot, Plot\n\nTo create a plot, you have to call Obsplot and pass a plot specification as argument. The simplest specification form is a Python dictionary with a syntax nearly identical as the JavaScript one.\nSo, starting with a very simple DataFrame:\n\nimport polars as pl\n\ndata = pl.DataFrame(\n    {\n        \"x\": [1, 5, 2, 4, 6, 2, 4],\n        \"y\": [2, 1, 3, 4, 5, 1, 2],\n        \"type\": [\"T1\", \"T2\", \"T1\", \"T2\", \"T1\", \"T1\", \"T2\"],\n    }\n)\n\nIf your JavaScript plot function looks like this:\nPlot(\n    {\n        grid: true,\n        marks: [Plot.dot(data, {x: \"x\", y: \"y\", fill: \"type\", r: 5})]\n    }\n)\nThen you can reproduce the plot with:\n\nObsplot(\n    {\n        \"grid\": True,\n        \"marks\": [Plot.dot(data, {\"x\": \"x\", \"y\": \"y\", \"fill\": \"type\", \"r\": 5})],\n    }\n)\n\n\n\n\nThe syntax is almost identical, except that dictionary keys must be quoted, and JavaScript true must be replaced by Python True.\nYou can use pandas and polars DataFrames as data sources, they are automatically serialized and passed to JavaScript via Arrow IPC format:\n\npenguins = pl.read_csv(\"data/penguins.csv\")\n\nObsplot(\n    {\n        \"grid\": True,\n        \"color\": {\"legend\": True},\n        \"marks\": [\n            Plot.dot(\n                penguins,\n                {\"x\": \"flipper_length_mm\", \"y\": \"body_mass_g\", \"fill\": \"island\"},\n            )\n        ],\n    }\n)\n\n\n\n\nFor the simplest cases, you can also create your plot directly by passing a Plot mark method to Obsplot:\n\nObsplot(Plot.auto(penguins, {\"x\": \"flipper_length_mm\"}))"
  },
  {
    "objectID": "contributing.html",
    "href": "contributing.html",
    "title": "Contributing",
    "section": "",
    "text": "# Once\nnpm run bundle\n# Watching\nnpm run watch"
  },
  {
    "objectID": "contributing.html#bundling",
    "href": "contributing.html#bundling",
    "title": "Contributing",
    "section": "",
    "text": "# Once\nnpm run bundle\n# Watching\nnpm run watch"
  },
  {
    "objectID": "contributing.html#tests",
    "href": "contributing.html#tests",
    "title": "Contributing",
    "section": "Tests",
    "text": "Tests\nRun Python tests:\nnpm run pytest\nRun JavaScript tests:\nnpm run jstest\nFor visual regression tests, first install the requirements:\ncd tests/ui\nnpm install\nStart a test jupyter instance with:\nnpm run uistart\nAnd run tests with:\n# Create / update reference snapshots\nnpm run uitest:update\n# Compare with reference snapshots\nnpm run uitest"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pyobsplot",
    "section": "",
    "text": "pyobsplot allows to use Observable Plot to create charts in Jupyter notebooks. Plots are produced as widgets from Python code with a syntax as close as possible to the JavaScript one.\n\nObsplot(\n    {\n        \"marks\": [\n            Plot.dot(\n                penguins, {\"x\": \"flipper_length_mm\", \"y\": \"body_mass_g\", \"fill\": \"sex\"}\n            )\n        ]\n    }\n)\n\n\n\n\nOr, for a bit more complex example:\n\nObsplot(\n    {\n        \"marginLeft\": 75,\n        \"marginRight\": 70,\n        \"x\": {\"insetRight\": 10},\n        \"y\": {\"grid\": True},\n        \"facet\": {\"marginRight\": 70},\n        \"marks\": [\n            Plot.ruleX([0]),\n            Plot.barX(\n                penguins,\n                Plot.groupY(\n                    {\"x\": \"count\"}, {\"fy\": \"island\", \"y\": \"species\", \"fill\": \"sex\"}\n                ),\n            ),\n            Plot.text(\n                [\"The Adelie species is the only one on Torgersen Island.\"],\n                {\n                    \"fy\": [\"Torgersen\"],\n                    \"frameAnchor\": \"right\",\n                    \"lineWidth\": 16,\n                    \"dx\": -4,\n                },\n            ),\n        ],\n    }\n)"
  },
  {
    "objectID": "index.html#overview",
    "href": "index.html#overview",
    "title": "pyobsplot",
    "section": "",
    "text": "pyobsplot allows to use Observable Plot to create charts in Jupyter notebooks. Plots are produced as widgets from Python code with a syntax as close as possible to the JavaScript one.\n\nObsplot(\n    {\n        \"marks\": [\n            Plot.dot(\n                penguins, {\"x\": \"flipper_length_mm\", \"y\": \"body_mass_g\", \"fill\": \"sex\"}\n            )\n        ]\n    }\n)\n\n\n\n\nOr, for a bit more complex example:\n\nObsplot(\n    {\n        \"marginLeft\": 75,\n        \"marginRight\": 70,\n        \"x\": {\"insetRight\": 10},\n        \"y\": {\"grid\": True},\n        \"facet\": {\"marginRight\": 70},\n        \"marks\": [\n            Plot.ruleX([0]),\n            Plot.barX(\n                penguins,\n                Plot.groupY(\n                    {\"x\": \"count\"}, {\"fy\": \"island\", \"y\": \"species\", \"fill\": \"sex\"}\n                ),\n            ),\n            Plot.text(\n                [\"The Adelie species is the only one on Torgersen Island.\"],\n                {\n                    \"fy\": [\"Torgersen\"],\n                    \"frameAnchor\": \"right\",\n                    \"lineWidth\": 16,\n                    \"dx\": -4,\n                },\n            ),\n        ],\n    }\n)"
  },
  {
    "objectID": "index.html#installation-and-usage",
    "href": "index.html#installation-and-usage",
    "title": "pyobsplot",
    "section": "Installation and usage",
    "text": "Installation and usage\nGetting started gives installation instructions and a quick usage overview.\nUsage gives more detailed usage instructions."
  },
  {
    "objectID": "index.html#features-and-limitations",
    "href": "index.html#features-and-limitations",
    "title": "pyobsplot",
    "section": "Features and limitations",
    "text": "Features and limitations\nFeatures:\n\nSyntax as close as possible to the JavaScript one\nPandas and polars DataFrame and Series objects are serialized using Arrow IPC format for improved speed and data type conversions\nCaching mechanism of data objects if they are used several times in the same plot\nCustom JavaScript code can be passed as strings with the js method\nPython date and datetime objects are automatically converted to JavaScript Date objects.\nPlots can be defined with a dictionary, a call to a Plot mark function, or with kwargs. See alternative syntaxes.\nWorks with Jupyter notebooks and Quarto HTML documents\n\nLimitations:\n\nWhen using notebooks inside VSCode, the cells output states are not saved between sessions. So when a notebook is closed and reopened, plots have to be recomputed to be displayed. This is currently a VSCode limitation.\nDoesn’t work in Quarto in formats other than HTML."
  },
  {
    "objectID": "index.html#credits",
    "href": "index.html#credits",
    "title": "pyobsplot",
    "section": "Credits",
    "text": "Credits\n\nObservable Plot, developed by Mike Bostock and Philippe Rivière among others.\nThe widget is developed thanks to the anywidget framework.\nThis documentation website is generated by Quarto and the bookup custom format."
  }
]