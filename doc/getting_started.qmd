---
title: "Getting started"
---

{{< include _setup.qmd >}}

## Installation

`pyobsplot` can be installed with `pip`:

```sh
pip install pyobsplot
```

If you want to use the [`jsdom` renderer](usage.qmd#renderers), you must have a working installation of [node.js](https://nodejs.org/en) and you must install the `pyobsplot` npm package globally or locally:

```sh
# Install locally
npm install pyobsplot
# Install globally
npm install -g pyobsplot
```

## Creating a plot

To use `pyobsplot`, you must import at least its `Plot` class with:

```{python}
from pyobsplot import Plot
```

To create a plot, call the `Plot.plot` method with a plot specification. The simplest specification form is a Python dictionary with a syntax nearly identical as the JavaScript one. 

So, starting with a very simple DataFrame:

```{python}
import polars as pl

data = pl.DataFrame(
    {
        "x": [1, 5, 2, 4, 6, 2, 4],
        "y": [2, 1, 3, 4, 5, 1, 2],
        "type": ["T1", "T2", "T1", "T2", "T1", "T1", "T2"],
    }
)
```

If your JavaScript plot function looks like this:

```javascript
Plot.plot(
    {
        grid: true,
        marks: [Plot.dot(data, {x: "x", y: "y", fill: "type", r: 5})]
    }
)
```

Then you can reproduce the plot with:

```{python}
Plot.plot(
    {
        "grid": True,
        "marks": [Plot.dot(data, {"x": "x", "y": "y", "fill": "type", "r": 5})],
    }
)
```

The syntax here is almost identical, except that dictionary keys must be quoted, and JavaScript `true` must be replaced by Python `True`.

You can use [pandas](https://pandas.pydata.org) and [polars](https://pola.rs) DataFrames as data sources, they are automatically serialized and passed to JavaScript via Arrow IPC format:

```{python}
penguins = pl.read_csv("data/penguins.csv")

Plot.plot(
    {
        "grid": True,
        "color": {"legend": True},
        "marks": [
            Plot.dot(
                penguins,
                {"x": "flipper_length_mm", "y": "body_mass_g", "fill": "island"},
            )
        ],
    }
)
```

## Plot generator

Calling `Plot.plot()` is the fastest way to generate a plot with the default settings, but for further customization you can import the `Obsplot` class and create a *plot generator*:

```{python}
from pyobsplot import Obsplot, Plot

op = Obsplot()
```

```{python}
# | include: false

op = Obsplot(format="html")
```

You can then create plots by calling this generator with your plot specification:

```{python}
# | eval: false

op(
    {
        "grid": True,
        "marks": [Plot.dot(data, {"x": "x", "y": "y", "fill": "type", "r": 5})],
    }
)
```

For the simplest cases, you can also create your plot directly by passing a `Plot` mark method to the generator:

```{python}
op(Plot.auto(penguins, {"x": "flipper_length_mm"}))
```

## Output formats

By default, plots will be created as [Jupyter widgets](https://ipywidgets.readthedocs.io/en/stable/), but `pyobsplot` is also able to output plots in PNG, SVG or static HTML formats.

The output format is configured by passing a `format` argument to `Obsplot()` when creating a generator object:

```{python}
# | eval: false
# Generator with widget output (default)
op = Obsplot(format="widget")
# Generate with static HTML output
opj = Obsplot(format="html")
```

It is also possible to specifiy a format when creating the plot by adding a `format` argument:

```{python}
# | eval: false
# Generator with default widget output format
op = Obsplot()
# Switch to PNG output for this plot
op(Plot.auto(penguins, {"x": "flipper_length_mm"}), format="png")
```

To save the plot to a file, you can add a `path` argument. The file extension will determine the output type: 

```{python}
# | eval: false
# Save widget to HTML file
op = Obsplot(format="widget")
op(Plot.auto(penguins, {"x": "flipper_length_mm"}), path="plot.html")
# Save plot to PNG file
op = Obsplot(format="png")
op(Plot.auto(penguins, {"x": "flipper_length_mm"}), path="plot.png")
```

::: {.callout-note}
With the "widget" format, export can only be done to HTML files. For other formats, plots can be saved as PNG, SVG, HTML and PDF.
:::

It is also possible to specify a `format` or a `path` when using the `Plot.plot()` syntax:

```python
# Display plot as PNG
Plot.plot(Plot.auto(penguins, {"x": "flipper_length_mm"}), format="png")
# Save plot as SVG
Plot.plot(Plot.auto(penguins, {"x": "flipper_length_mm"}), path="plot.svg")
```

## Learn more

To go further, see the [usage](usage.qmd) page.

