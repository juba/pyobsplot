---
title: "Usage"
---

{{< include _setup.qmd >}}

For a quick usage introduction, see [getting started](getting_started.qmd).

To create a plot we can either use `Plot.plot()` to generate plots with the default settings, or create a plot generator object to be able to customize things further. This is the way we will use here.

So we start by importing the needed classes and create a plot generator object:

```{python}
#| eval: false
from pyobsplot import Obsplot, Plot

op = Obsplot()
```


## Plot specification

Converting a plot specification from JavaScript to Python should be straightforward most of the time:

- all dictionary keys must be quoted (so `x:` becomes `"x":`)
- JavaScript `true` and `false` must be replaced by `True` and `False`
- JavaScript `null` must be replaced by `None`

So the following JavaScript code:

```javascript
Plot.plot(
    {
        color: {legend: true},
        grid: false,
        marks: [Plot.dot(data, {x: "x", y: "y", fill: "type", r: 5})]
    }
)
```

Becomes:

```{python}
#| eval: false
op({
    "color": {"legend": True},
    "grid": False,
    "marks": [Plot.dot(data, {"x": "x", "y": "y", "fill": "type", "r": 5})],
})
```

It is possible to  replace JavaScript methods from the `Plot`, `d3` and `Math` modules with Python methods, but you must first import the corresponding classes.

```{python}
from pyobsplot import Obsplot, Plot, d3

op({
    "x": {
        "axis": None
    },
    "marks": [
        Plot.ruleY([0], {"stroke": "steelblue"}),
        Plot.lineY(d3.cumsum({ "length": 100 }, d3.randomNormal()))
    ]
})
```

If your specification includes JavaScript code (such as anonymous functions), you can pass it as a string by using the `js` method (after importing it):

```{python}
from pyobsplot import Obsplot, Plot, d3, js
import polars as pl

data = pl.DataFrame({
    "x": [1, 5, 2, 4, 6, 2, 4],
    "y": [2, 1, 3, 4, 5, 1, 2],
    "type": ["T1", "T2", "T1", "T2", "T1", "T1", "T2"],
})

op({
    "grid": True,
    "marks": [
        Plot.dot(data, {
            "x": "x", "y": "y", "r": 5,
            "stroke": "black", "fill": "steelblue",
            "fillOpacity": js("d => d.type == 'T1' ? 0.7 : 0.1")
        })
    ]
})
```

### Alternative syntax

For the simplest cases, you can also pass a mark method directly as plot specification. The JavaScript `plot()` method will be called automatically to display the plot:

```{python}
import random
op(
    Plot.tickX(
        [random.gauss(0,1) for i in range(1000)], 
        {"stroke": "steelblue", "opacity": 0.2}
    )
)
```


## Output formats

`pyobsplot` allows to output plots as [Jupyter widgets](https://ipywidgets.readthedocs.io/en/stable/), but also as static HTML, SVG or PNG.

The output format is determined by the `format` argument passed to a plot generator object or during plot creation.

<table class="table table-striped renderers-table">
<thead>
<tr><th>Format value</th><th>Output type</th><th>Renderer</th></tr>
</thead>
<tbody>
<tr><td>"widget" (default)</td><td>Jupyter Widget</td><td>widget</td></tr>
<tr><td>"html"</td><td>Static HTML</td><td>jsdom</td></tr>
<tr><td>"svg"</td><td>SVG image</td><td>jsdom or jsdom+typst </td></tr>
<tr><td>"png"</td><td>PNG image</td><td>jsdom+typst</td></tr>

</tbody>
</table>

The following table lists the differences between the widget output and the other static formats (HTML, SVG and PNG).

<style>
.renderers-table {
    width: 100%;
    text-align: center;
    vertical-align: middle;
    margin-bottom: 3em;
}
.renderers-table td,
.renderers-table th {
    padding: .5em 2em !important;
}
.renderers-table tbody tr {
    height: 4em;
}
</style>

<table class="table table-striped renderers-table">
<thead>
<tr><th style="width: 25%;"></th><th style="width: 37%;">Widget output</th><th style="width: 37%;">Other outputs</th></tr>
</thead>
<tbody>
<tr>
<td>**Output**</td>
<td>Jupyter Widget</td>
<td>Static HTML, SVG, PNG. PDF is available when saving to a file.</td>
</tr>
<tr>
<td>**Additional<br>installation**</td>
<td>None</td>
<td>Needs a working node.js installation and an additional `npm` package</td>
</tr>
<tr>
<td>**Quarto**</td>
<td>Supported only in HTML format</td>
<td>HTML output supported in HTML format, SVG and PNG outputs supported in other formats</td>
</tr>
<tr>
<td>**Output size**</td>
<td>Big : includes the data and code needed to generate the plot</td>
<td>Moderate : size of the output file</td>
</tr>
<tr>
<td>**Plot interactions<br>(tooltips...)**</td>
<td>Supported</td>
<td>Not supported. Only static plots are produced.</td>
</tr>
<tr>
<td>**Save plot to file**</td>
<td>Plots can be saved as embeddable HTML file</td>
<td>Plots can be saved to static HTML, SVG, PNG or PDF files.</td>
</tr>
<tr>
<td>**Jupyter<br>interactivity**</td>
<td>Basic</td>
<td>None</td>
</tr>
<tr>
<td>**Persistence<br>between sessions**</td>
<td>Widget state is not saved between sessions (for now)</td>
<td>Output is saved between sessions</td>
</tr>
</tbody>
</table>

To use a static output format like HTML, SVG or PNG, you need a working [node.js](https://nodejs.org/en) installation and you must install the npm `pyobsplot` package globally or locally:

```sh
# Install locally
npm install pyobsplot
# Install globally
npm install -g pyobsplot
```

After that, you can select which format to use when creating a plot generator object:

```{python}
# | eval: false
# Generator with a widget output (default)
opw = Obsplot(format="widget")
# Generator with a PNG output
opj = Obsplot(format="png")
```

It is also possible to specifiy a format when creating the plot by adding a `format` argument:

```{python}
# | eval: false
# Generator with default widget output format
op = Obsplot()
# Switch to PNG output for this plot
op(Plot.auto(penguins, {"x": "flipper_length_mm"}), format="png")
# Specify format directly to Plot.plot()
Plot.plot(Plot.auto(penguins, {"x": "flipper_length_mm"}), format="png")
```



## Saving plots to file

Plots can be saved to a file. To do this, just add a `path` argument to your generator or `Plot.plot` call:

```{python}
#| eval: false

op(Plot.lineY([1,2,3,2]), path="path_to/file.svg")
Plot.plot(Plot.lineY([1,2,3,2]), path="path_to/file.svg")
```

### Widget format

When using the `widget` format, plots can only be saved to HTML files. These files retain interactive features such as tooltips. 


```{python}
#| eval: false
opw = Obsplot()
opw(Plot.lineY([1,2,3,2]), path="path_to/file.html")
```

::: {.callout-tip}
To embed widgets into an HTML website or document, Quarto documents can be more practical.
:::

### Other output formats

Plots can also be saved as SVG, PNG, PDF or static HTML files. The output format is determined by the `path` file extension.

```{python}
#| eval: false
opw = Obsplot()
opw(Plot.lineY([1,2,3,2]), path="path_to/file.png")
```

::: {.callout-note}
PDF format is only available when saving to a file, as PDF output cannot be embedded and displayed in a Jupyter notebook.
:::

::: {.callout-note}
When saving a plot to an HTML file, the result will depend on the `format` value. If `format="widget"` (the default), the HTML file will be a Jupyter widget, but if `format="html"`, then a static HTML version will be saved.
:::


::: {.callout-caution}
Plot generates charts as SVG, but if a legend, title, subtitle or caption is present, the SVG is wrapped in a `<figure>` HTML tag. In this case, when saving to an SVG file, the plot will be converted using `typst`.
:::



## Themes

When using a plot generator object, it is possible to specify one of three color themes:

- `light` theme (default) creates plots with a white background and a black foreground color
- `dark` theme creates plots with a black background and a white foreground
- `current` theme creates plots with a transparent background and a `currentColor` foreground

You can specify a mode when creating the plot generator object by using the `theme` argument:

```{python}
#| eval: false
op_dark = Obsplot(theme="dark")
```

You can see output examples in the [themes gallery](gallery_themes.qmd)

::: {.callout-note}
The `current` theme is not available when exporting to PNG, PDF, or SVG via typst.
:::


## Default specification values

When creating a plot generator objects, it is possible to specify default specification values that will be applied to every plot created with this generator.

Only the top-level layout options can be specified as defaults. This can be useful to specify a default `width`, colors, margins or even `style`.

The complete list of available default attributes is :

```{python}
#| echo: false
from pyobsplot.utils import ALLOWED_DEFAULTS
print(ALLOWED_DEFAULTS)
```

So to create a plot generator object that creates by default 400px wide plots with a 50px margin and white on blue colors, you could use :


```{python}
op_colors = Obsplot(
    format = "html",
    default={
        "width": 400, 
        "margin": 50,
        "style": {"color": "white", "background-color": "#004"}
    }
)
```

```{python}
op_colors(
    Plot.dot(data, {"x": "x", "y": "y"})
)
```

## Data handling

### DataFrames and Series

Pandas and polars DataFrames can be passed directly in a plot specification. They will be converted to JavaScript objects via Arrow IPC serialization, to ensure speed and data types conversion.

```{python}
import polars as pl
from datetime import date

df = pl.DataFrame({
    "Date": [date(2023, 1, 1), date(2023, 1, 2), date(2023, 1, 3), date(2023, 1, 4)],
    "Value": [4.2, 3.8, 4.5, 4.7]
})

op({
    "x": {"grid": True},
    "y": {"domain": [0, 5]},
    "marks": [Plot.lineY(df, {"x": "Date", "y": "Value", "stroke": "steelblue"})]
})
```

If you pass a pandas or polars Series object, it will be automatically converted to a DataFrame with one column:

```{python}
value = df.get_column("Value")

op(
    Plot.tickX(value, {"x": "Value", "stroke": "darkviolet"})
)
```

`pyobsplot` implements a simple caching mechanism for some data objects (it currently works for DataFrames and for GeoJson data). Sometimes the same data object is used several times in a plot specification:

```{python}
penguins = pl.read_csv("data/penguins.csv")

op({
  "height": 600,
  "grid": True,
  "facet": {
    "marginRight": 80
  },
  "marks": [
    Plot.frame({"facet": False}),
    Plot.dot(penguins, {
      "x": "culmen_depth_mm",
      "y": "culmen_length_mm",
      "r": 1.5,
      "fill": "#ccc",
      "facet": "exclude",
      "fx": "sex",
      "fy": "species",
    }),
    Plot.dot(penguins, {
       "x": "culmen_depth_mm",
       "y": "culmen_length_mm",
       "fx": "sex",
       "fy": "species",
    })
  ]
})
```

In this case, caching ensures that the `penguins` DataFrame is only serialized and transmitted once instead of twice. 

### datetime objects

`datetime.date` and `datetime.datetime` Python objects are automatically serialized and converted to JavaScript `Date` objects.

That makes the following two specifications equivalent:

```{python}
op({
    "x": {"domain": [js("new Date('2021-01-01')"), js("new Date('2022-01-01')")]}, 
    "grid": True
})
```

```{python}
from datetime import date
op({
    "x": {"domain": [date(2021,1,1), date(2022,1,1)]}, 
    "grid": True
})
```

As well as the two following ones, using `datetime`:

```{python}
op({
    "x": {"domain": [js("new Date('2021-01-01T07:00:00')"), js("new Date('2021-01-01T08:00:00')")]}, 
    "grid": True
})
```

```{python}
from datetime import datetime
op({
    "x": {"domain": [datetime(2021,1,1,7,0,0), datetime(2021,1,1,8,0,0)]}, 
    "grid": True
})
```


## Quarto

`pyobsplot` plots are compatible with [quarto](https://quarto.org) HTML formats. If you use static output formats such as SVG, PNG or PDF, they may work in PDF or docx documents as well.

If your source document is a jupyter notebook (and not a `.qmd` file), then you have to use the `--execute` argument to force plot computation and to make them visible in the output:

```sh
quarto render test.ipynb --execute --to html
```



## Jupyter Interactivity

When using the default `widget` format, the fact that plots are generated as Jupyter widgets allow for basic interactivity. More specifically, you can set the `spec` attribute of an existing `Obsplot` to another plot specification and it will update it.

This allows to do things like the following, where a plot is updated depending on the value of a Jupyter `IntSlider` widget:

```{python}
#| eval: false
def generate_plot_spec(opacity):
    return {
      "grid": True,
      "marks": [
            Plot.rectY(penguins, Plot.binX({"y": "count"}, {"x": "body_mass_g", "fill": "steelblue", "fillOpacity": opacity})),
            Plot.ruleY([0])
            ]
    }

plot = op(generate_plot_spec(1))

def update_plot(change):
    new = change['new']
    plot.spec = generate_plot_spec(new / 100)


w = IntSlider(value = 100, min = 0, max = 100)
w.observe(update_plot, names='value')

display(w)
display(plot)
```

You can see a live version of this example in the following Colab notebook: [![](img/colab-badge.svg)](https://colab.research.google.com/github/juba/pyobsplot/blob/main/examples/interactivity.ipynb)


